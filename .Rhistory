set.seed(1234)
par(mar=c(0,0,0,0))
x <- rnorm(12, mean = rep(1:3, each = 4), sd =0.2)
y <- rnorm(12, mean = rep(c(1,2,1), each = 4), sd = 0.2)
plot(x,y, col = "blue", pch = 10, cex = 2)
text(x +0.05, y + 0.05, labels = as.character(1:12))
dataFrame <- data.frame(x = x, y = y)
dist(dataFrame)
distxy <- dist(dataFrame)
hClustering <- hclust(distxy)
plot(hClustering)
## Prettier dendrograms
myplcust <- function(hclust, lab = hclust$labels, lab.col = rep(1, length(hclust$labels)), hang = 0.1, ...){
## modification of plclust for plotting hclust objects *in colour*! Copyright
## Eva KF Chan 2009 Arguments: hclust: hclust object lab: a character vector
## of labels of the leaves of the tree lab.col: colour for the labels;
## NA = default device foreground colour hang: as in hclust & plclust Side
## effect: A display of hierarchical cluster with coloured leaf labels.
y <- rep(hclust$height, 2)
x <- as.numeric(hclust$merge)
y <- y[which(x < 0)]
x <- x[which(x < 0)]
x <- abs(x)
y <- y[order(x)]
x <- x[order(x)]
plot(hclust, labels = FALSE, hang = hang, ...)
text(x = x, y = y[hclust$order] - (max(hclust$height) * hang), labels = lab[hclust$order], col = lab.col[hclust$order], srt = 90,
adj = c(1, 0.5), xpd = NA, ...)
}
myplcust(hClustering, lab = rep(1:3, each = 4), lab.col = rep(1:3, each = 4))
dataFrame <- data.frame(x = x, y = y)
set.seed(143)
dataMatrix <- as.matrix(dataFrame)[sample(1:12), ]
heatmap(dataMatrix)
set.seed(1234)
par(mar=c(0,0,0,0))
x <- rnorm(12, mean = rep(1:3, each = 4), sd = 0.2)
y <- rnorm(12, mean = rep(c(1,2,1), each = 4), sd = 0.2)
plot(x, y, col = "blue", pch = 19, cex = 2)
text(x + 0.05, y + 0.05, labels = as.character(1:12))
dataFrame <- data.frame(x, y)
kmeansObj <- kmeans(dataFrame, centers = 3)
names(kmeansObj)
kmeansObj$cluster
par(mar = rep(0.2, 4))
plot(x, y, col = kmeansObj$cluster, pch = 19, cex = 2)
points(kmeansObj$centers, col = 1:3, pch = 3, cex = 3, lwd = 3)
set.seed(1234)
par(mar=c(0,0,0,0))
x <- rnorm(12, mean = rep(1:3, each = 4), sd = 0.2)
y <- rnorm(12, mean = rep(c(1,2,1), each = 4), sd = 0.2)
plot(x, y, col = "blue", pch = 19, cex = 2)
text(x + 0.05, y + 0.05, labels = as.character(1:12))
## kmeans()
dataFrame <- data.frame(x, y)
kmeansObj <- kmeans(dataFrame, centers = 3)
names(kmeansObj)
kmeansObj$cluster
par(mar = rep(0.2, 4))
plot(x, y, col = kmeansObj$cluster, pch = 19, cex = 2)
points(kmeansObj$centers, col = 1:3, pch = 3, cex = 3, lwd = 3)
## Heatmaps
set.seed(1234)
dataMatrix <- as.matrix(dataFrame)[sample(1:12),]
kmeansObj2 <- kmeans(dataMatrix, centers = 3)
par(mfrow = c(1,2), mar = c(2,4,0.1,0.1))
image(t(dataMatrix)[, nrow(dataMatrix):1], yaxt = "n")
image(t(dataMatrix)[, order(kmeansObj$cluster)], yaxt = "n")
set.seed(12345)
par(mar = rep(0.2,4))
dataMatrix <- matrix(rnorm(400), nrow = 40)
image(1:10, 1:40, t(dataMatrix)[, nrow(dataMatrix):1])
## Cluster de Data
heatmap(dataMatrix)
for(i in 1:40){
# flip a coin
coinFlip <- rbinom(1, size = 1, prob = 0.5)
# if coin is heads add a common pattern to that row
if(coinFlip){
dataMatrix[i,] <- dataMatrix[i, ] + rep(c(0,3), each = 5)
}
}
par(mar = rep(0.2,4))
image(1:10, 1:40, t(dataMatrix)[, nrow(dataMatrix):1])
heatmap(dataMatrix)
hh <- hclust(dist(dataMatrix))
dataMatrixOrdered <- dataMatrix[hh$order,]
par(mfrow = c(1,3))
image(t(dataMatrixOrdered)[, nrow(dataMatrixOrdered):1])
plot(rowMeans(dataMatrixOrdered), 40:1, xlab = "Row Mean", ylab = "Row", pch = 19)
plot(colMeans(dataMatrixOrdered), xlab = "Column", ylab = "Column Mean", pch = 19)
## Components of the SVD u and v
svd1 <- svd(scale(dataMatrixOrdered))
par(mfrow = c(1,3))
image(t(dataMatrixOrdered)[, nrow(dataMatrixOrdered):1])
plot(svd1$u[,1], 40:1, xlab = "Row", ylab = "First left singular vector", pch = 19)
plot(svd1$v[,1], xlab = "Column", ylab = "First right singular vector", pch = 19)
par(mfrow = c(1,2))
plot(svd1$d, xlab = "Column", ylab = "Singular value", pch = 19)
plot(svd1$d^2, xlab = "Column", ylab = "Prop. of variance explained", pch = 19)
plot(svd1$d, xlab = "Column", ylab = "Singular value", pch = 19)
plot(svd1$d^2/sum(svd1$d^2), xlab = "Column", ylab = "Prop. of variance explained", pch = 19)
svd1 <- svd(dataMatrixOrdered)
pca1 <- prcomp(dataMatrixOrdered, scale = TRUE)
plot(pca1$rotation[,1], svd1$v[,1], pch = 19, xlab = "Principal Component 1", ylab = "Right singular vector 1")
abline(c(0,1))
constantMatrix <- dataMatrixOrdered * 0
for(i in 1:dim(dataMatrixOrdered)[1]){constantMatrix[i,] <- rep(c(0,1), each = 5)}
svd1 <- svd(constantMatrix)
par(mfrow = c(1,3))
image(t(constantMatrix)[,nrow(constantMatrix):1])
plot(svd1$d, xlab = "Column", ylab = "Singular Value", pch = 19)
plot(svd1$d^2/sum(svd1$d^2), xlab = "Column", ylab = "Prop. of variance explained", pch = 19)
set.seed(678910)
for(i in 1:40){
# Flip a coin
coinFlip1 <- rnorm(1, size = 1, prob = 0.5)
coinFlip2 <- rnorm(1, size = 1, prob = 0.5)
# If coin heads add a common pattern to that row
if(coinFlip1){
dataMatrix[i,] <- dataMatrix[i,] + rep(c(0,5), each = 5)
}
if(coinFlip2){
dataMatrix[i,] <- dataMatrix[i, ] + rep(c(0,5), 5)
}
}
set.seed(678910)
for(i in 1:40){
# Flip a coin
coinFlip1 <- rbinom(1, size = 1, prob = 0.5)
coinFlip2 <- rbinom(1, size = 1, prob = 0.5)
# If coin heads add a common pattern to that row
if(coinFlip1){
dataMatrix[i,] <- dataMatrix[i,] + rep(c(0,5), each = 5)
}
if(coinFlip2){
dataMatrix[i,] <- dataMatrix[i, ] + rep(c(0,5), 5)
}
}
hh <- hclust(dist(dataMatrix))
dataMatrixOrdered <- dataMatrix[hh$order, ]
svd2 <- svd(scale(dataMatrixOrdered))
par(mfrow = c(1,3))
image(t(dataMatrixOrdered)[, nrow(dataMatrixOrdered):1])
plot(rep(c(0,1), each = 5), pch = 19, xlab = "Column", ylab = "Pattern 1")
plot(rep(c(0,1), 5), pch = 19, xlab = "Column", ylab = "Pattern 2")
svd2 <- svd(dataMatrixOrdered)
par(mfrow = c(1,3))
image(t(dataMatrixOrdered)[, nrow(dataMatrixOrdered):1])
plot(svd2$d[,1], xlab = "Column", ylab = "First right singular vector", pch = 19)
svd2 <- svd(dataMatrixOrdered)
par(mfrow = c(1,3))
image(t(dataMatrixOrdered)[, nrow(dataMatrixOrdered):1])
plot(svd2$V[,1], xlab = "Column", ylab = "First right singular vector", pch = 19)
svd2 <- svd(dataMatrixOrdered)
par(mfrow = c(1,3))
image(t(dataMatrixOrdered)[, nrow(dataMatrixOrdered):1])
plot(svd2$v[,1], xlab = "Column", ylab = "First right singular vector", pch = 19)
plot(svd2$v[,2], xlab = "Column", ylab = "Second right singular vector", pch = 19)
svd1 <- svd(scale(dataMatrixOrdered))
par(mfrow = c(1,2))
plot(svd1$d, pch = 19, xlab = "Column", ylab = "Singular value")
plot(svd1$d^2/sum(svd1$d^2), pch = 19, xlab = "Column", ylab = "Percent of variance explained")
## Missing values
dataMatrix2 <- dataMatrixOrdered
# Randomly insert some missing data
dataMatrix2[sample(1:100, size = 40, replace = FALSE)] <- NA
svd1 <- svd(scale(dataMatrix2))
install.packages("imput")
install.packages("bioconductor")
install.packages("impute")
install.packages("BiocManager")
library(impute)
BiocManager::install("impute")
library(impute)
dataMatrix2 <- dataMatrixOrdered
dataMatrix2[sample(1:100, size = 40, replace = FALSE)] <- NA
dataMatrix2 <- impute.knn(dataMatrix2)$data
svd1 <- svd(scale(dataMatrixOrdered)); svd2 <- svd(scale(dataMatrix2))
par(mfrow = c(1,2)); plot(svd1$v[,1], pch = 19); plot(svd2$v[,1], pch = 19)
## Face example
load("datasets/face.rda")
image(t(faceData)[, nrow(faceData):1])
svd1 <- svd(scale(faceData))
plot(svd1$d^2/sum(svd1$d^2), pch = 19, xlab = "Singular Vector", ylab = "Variance explained")
# Here svd1$d[1] is a constant
approx1 <- svd1$u[,1] %*% t(svd1$v[,1]) * svd1$d[1]
# In these examples we need to make the diagonal matrix out of d
approx5 <- svd1$u[, 1:5] %*% diag(svd1$d[1:5]) %*% t(svd1$v[, 1:5])
approx10 <- svd1$u[, 1:10] %*% diag(svd1$d[1:10]) %*% t(svd1$v[, 1:10])
## plot approximations
par(mfrow = c(1,4))
image(t(approx1)[,nrow(approx1):1], main = "(a)")
image(t(approx5)[,nrow(approx5):1], main = "(b)")
image(t(approx10)[,nrow(approx10):1], main = "(c)")
image(t(faceData)[, nrow(faceData):1], main = "(d)") ## Original Data
## colorRamp
pal <- colorRamp(c("red", "blue"))
pal(0)
pal(1)
pal(0.5)
pal(seq(0,1, len = 10))
## colorRampPalette
pal <- colorRampPalette(c("red", "yelow"))
pal(2)
## colorRampPalette
pal <- colorRampPalette(c("red", "yellow"))
pal(2)
pal(10)
## RColorBrewer and colorRampPalette
library(RColorBrewer)
cols <- brewer.pal(3, "BuGn")
cols
image(volcano, col = pal(20))
## The smothScatter function
x <- rnorm(10000)
y <- rnorm(10000)
smoothScatter(x,y)
## rgb function
plot(x,y, pch = 19)
plot(x,y, col =c(0,0,0,0.2), pch = 19)
plot(x,y, col =rgb(0,0,0,0.2), pch = 19)
## Slightly processed data
load("datasets/samsungData.rda")
names(samsungData)[1:12]
table(samsungData$activity)
## Plotting average acceleration for first subject
par(mfrow = c(1,2), mar = c(5,4,1,1))
View(dataFrame)
install.packages("xtable")
install.packages(installr)
install.packages("installr")
library(installr)
updateR()
updateR()
setwd("/Volumes/Files/Source/RepData_PeerAssessment1")
activity <- read.csv("../RepData_PeerAssessment1/activity.csv")
convertHour <- function(timelapse){
if(timelapse < 100){
if(timelapse < 10){
hour <- paste("00:0", timelapse, sep = "")
}
else{
hour <- paste("00:", timelapse, sep = "")
}
}else{
intHour <- as.integer(timelapse/100)
intMinutes <- timelapse%%100
if(intHour < 10){
if(intMinutes < 10){
hour <- paste("0",intHour,":0",intMinutes, sep = "")
}else{
hour <- paste("0",intHour,":",intMinutes, sep = "")
}
}else{
if(intMinutes < 10){
hour <- paste("",intHour,":0",intMinutes, sep = "")
}else{
hour <- paste("",intHour,":",intMinutes, sep = "")
}
}
}
hour
}
hour <- sapply(activity$interval, FUN = convertHour)
activity2 <- activity[,1]
convertHour <- function(timelapse){
if(timelapse < 100){
if(timelapse < 10){
hour <- paste("00:0", timelapse, sep = "")
}
else{
hour <- paste("00:", timelapse, sep = "")
}
}else{
intHour <- as.integer(timelapse/100)
intMinutes <- timelapse%%100
if(intHour < 10){
if(intMinutes < 10){
hour <- paste("0",intHour,":0",intMinutes, sep = "")
}else{
hour <- paste("0",intHour,":",intMinutes, sep = "")
}
}else{
if(intMinutes < 10){
hour <- paste("",intHour,":0",intMinutes, sep = "")
}else{
hour <- paste("",intHour,":",intMinutes, sep = "")
}
}
}
hour
}
activity <- read.csv("../RepData_PeerAssessment1/activity.csv")
hour <- sapply(activity$interval, FUN = convertHour)
activity2 <- activity[,1]
activity2$timestamp <- as.POSIXct(paste(activity$date,hour, sep = " "))
rm(hour)
View(activity2)
activity <- read.csv("../RepData_PeerAssessment1/activity.csv")
convertHour <- function(timelapse){
if(timelapse < 100){
if(timelapse < 10){
hour <- paste("00:0", timelapse, sep = "")
}
else{
hour <- paste("00:", timelapse, sep = "")
}
}else{
intHour <- as.integer(timelapse/100)
intMinutes <- timelapse%%100
if(intHour < 10){
if(intMinutes < 10){
hour <- paste("0",intHour,":0",intMinutes, sep = "")
}else{
hour <- paste("0",intHour,":",intMinutes, sep = "")
}
}else{
if(intMinutes < 10){
hour <- paste("",intHour,":0",intMinutes, sep = "")
}else{
hour <- paste("",intHour,":",intMinutes, sep = "")
}
}
}
hour
}
hour <- sapply(activity$interval, FUN = convertHour)
activity2 <- activity[,1]
activity2$timestamp <- as.POSIXct(paste(activity$date,hour, sep = " "))
View(activity2)
activity <- read.csv("../RepData_PeerAssessment1/activity.csv")
convertHour <- function(timelapse){
if(timelapse < 100){
if(timelapse < 10){
hour <- paste("00:0", timelapse, sep = "")
}
else{
hour <- paste("00:", timelapse, sep = "")
}
}else{
intHour <- as.integer(timelapse/100)
intMinutes <- timelapse%%100
if(intHour < 10){
if(intMinutes < 10){
hour <- paste("0",intHour,":0",intMinutes, sep = "")
}else{
hour <- paste("0",intHour,":",intMinutes, sep = "")
}
}else{
if(intMinutes < 10){
hour <- paste("",intHour,":0",intMinutes, sep = "")
}else{
hour <- paste("",intHour,":",intMinutes, sep = "")
}
}
}
hour
}
hour <- sapply(activity$interval, FUN = convertHour)
activity2 <- activity[,1]
activity2$timestamp <- paste(activity$date,hour, sep = " ")
activity2 <- activity[,c(1)]
activity2$timestamp <- paste(activity$date,hour, sep = " ")
hour
View(activity2)
View(activity2)
activity2$timestamp <- paste(activity$date,hour, sep = " ")
activity2 <- activity[,1]
activity2$timestamp <- paste(activity$date,hour, sep = " ")
View(activity)
View(activity)
activity2 <- activity
activity2 <- activity[,c(1,2)]
activity2$date <- as.POSIXct(paste(activity$date,hour, sep = " "))
View(activity2)
?ts
View(activity2)
?tidyverse
??tidyverse
rm(hour)
library(dplr)
library(dplyr)
install.packages("tidyverse")
